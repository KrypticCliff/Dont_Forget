// Test Extract negative 

#include <iostream>
#include <fstream>
#include <curl/curl.h>
#include "boost/filesystem.hpp"

namespace fs = boost::filesystem;
/*
struct MemoryStruct {
     char *memory;
     size_t size;
};

size_t write_callback(char *contents, size_t size, size_t nmemb, void *userp) {
  size_t realsize = size * nmemb;
  struct MemoryStruct *mem = (struct MemoryStruct *)userp;

  char *ptr = realloc(mem->memory, mem->size + realsize + 1);
  if(ptr == NULL) {
    // out of memory!
    printf("not enough memory (realloc returned NULL)\n");
    return 0;
  }

  mem->memory = ptr;
  memcpy(&(mem->memory[mem->size]), contents, realsize);
  mem->size += realsize;
  mem->memory[mem->size] = 0;

  return realsize;
}

*/

int main(int argc, char** argv) {
     fs::path url_file_chk("url_list.txt");

     if (!fs::exists(url_file_chk)) {
          std::cout << "File Does Not Exist. Creating File...\n";
          std::ofstream file("url_list.txt");
          file.close();
     }

     FILE* url_txt = fopen("./url_list.txt", "r");

     char const *url = "http://image-net.org/api/text/imagenet.synset.geturls?wnid=n09618957";
     CURL *curl = curl_easy_init();
     CURLcode res;

     curl_easy_setopt(curl, CURLOPT_URL, url);
//     curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_callback);
//     curl_easy_setopt(curl, CURLOPT_WRITEDATA, url_txt);


     res = curl_easy_perform(curl);

     if (res) {
          std::printf("Error: %d\n", res);
     }

     curl_easy_cleanup(curl);
     fclose(url_txt);
     return 0;
}
